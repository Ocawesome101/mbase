*NAME&
        shell - library doing most processing behind sh

*DESCRIPTION&
        The *shell& library does the bulk of the processing behind the relatively small #/bin/sh.lua& script.  It provides facilities for argument parsing, executing commands, and features some builtins under @shell.builtins&.

*FIELDS
        @shell.builtins&
                Table containing all shell builtins.

        @shell.errors&
                Table mapping common error codes to error messages.  Any attempt to index a nonexistent entry will simply return ~"failed"&.

        @shell.codes&
                Provides bindings of a fashion for common error codes.  Available are *misc&, *success&, *failure&, *argument&, and *permission&.

*METHODS
        setAlias&(*k&: ~string&, *v&: ~string&)
                Aliases the command ~k& to the string ~v&.

        *unsetAlias&(*k&: ~string)
                Unsets the alias ~k& if it was previously set.

        *error&(*cmd&: ~string&, *err&: ~string&)
                Writes a message in the format ~cmd: err& to standard error.
        
        *expand&(*str&: ~string&): ~string&
                Expands the provided string for variables and basic wildcards.

        *parse&(*...&: ~strings&): @table&, @table&
                Parses the provided varargs ~...& into two tables @args& and @opts&.

                If a provided argument is the string ~--&, then the function will insert all remaining varargs into the @args& table.

                If a provided argument begins with ~--&, it will be interpreted as *--?k*=?v&.  @opts&[~k&] will be set to either ~v& or ?true&.

                If a provided argument begins with ~-&, each character will be interpreted as its own option.

                All other arguments will be inserted into the @args& table.

        *getopt&(*args&: @table&, *argdefs&: @table&): @table&, @table&
                More flexible version of ^shell.parse& inspired by GNU *getopt()&.

                @argdefs& should take the form of @{& [~"option"&] = @{& takesarg = ?boolean&, reqarg = ?boolean& @}&, *...& @}&.

                ?takesarg& specifies whether the option will accept an argument and ?reqarg& specifies if the argument is required.  If an option is not specified in the table, ^shell.getopt& will parse it in a similar manner to ^shell.parse&.

        *resolve&(*path&: ~string&[, *ext&: ~string&]): ~string& or *nil&, ~string&
                Attempts to resolve the filename ~path& to a command.  Checks the absolute path if applicable, all entries in the path, and the current working directory, in order.

        *split&(*str&: ~string&): @table&
                Slower but slightly more advanced text splitting function.  Splits text on spaces, except when the space is between a pair of single quotes.

        *execute&(*...&: ~strings&): ?boolean&
                Interprets ~...& as a shell command as seen in the manual page for *sh&(*1&).

*COPYRIGHT
        Monolith System Utilities& (c) 2020 Ocawesome101 under the GNU GPLv3.

*SEE ALSO
        sh&(*1&), *sh&(*3&)
