[97mNAME[37m
        Lua - the Lua programming language

[97mNOTE
        [91mThis manual page is incomplete.  If you feel that you can make contributions to it, please do, and create a pull request.

[97mOVERVIEW/INTRODUCTION[37m
        This manual page attempts to give an overview of the basics of Lua.  It assumes that the reader has previous experience with programming and is familiar with [97mif[37m/[97melse[37m blocks, [97mwhile[37m and [97mfor[37m loops; in essence, the basics of computer programming.  I do NOT attempt to teach the basic grounding concepts of programming which I have previously mentioned.

        For complete function documentation on the Lua programming language, see [94mhttps://lua.org/manual/5.3/manual.html[37m.

[97mTHE LANGUAGE[37m
        [97mTypes[37m
            Lua provides six basic types: [97mstring[37m, [97mtable[37m, [97mnumber[37m, [97mfunction[37m, [97mboolean[37m, and [97mnil[37m.  A seventh type, [97muserdata[37m, is sometimes used but will not be covered here.

        [97mGlobal Environment[37m
            Lua's global environment takes the form of a table (see below).  This simpifies program flow and allows for easier sandbox creation (more on this later).

        [97mVariables[37m
            In Lua, unless explicitly declared as [93mlocal[37m, all variables are global - that is, not affected by scope.  Local variables are usually faster to access, and are lighter on memory as they are cleared when the scope is exited and garbage-collected.

            Variable names can contain any combination, except certain reserved keywords, of alphanumeric characters plus the underscore.  Variable names may not begin with a number and may be of any practical length - in my testing I was able to assign a roughly 28,700-character variable name.

        [97mTables[37m
            Lua's tables are simple collections of key-value pairs, similar to Python's [97mdictionary[37m or, loosely, C's [97mstruct[37m.  Both keys and values can be of any type.

            Tables are declared using curly braces ([97m{}[37m) and indexed using square braces ([97m[][37m).  Table keys provide value indices, and if a key is a syntactically valid variable name it can be indexed with the syntax [97mtable[37m.[97mkey[37m rather than [97mtable[37m[[97mkey[37m].

        [97mMetatables[37m
            Metatables are tables containing specific fields which declare otherwise undefined behavior on certain objects.  Excepting tables, every type has a single shared metatable which cannot be changed (except through [97mdebug.setmetatable[37m, which is not available in OpenComputers).

            For example, metatables may be used to implement object-oriented programming (see the [97mclass[37m([97m3[37m) library included with Monolith).

            Monolith facilitates using the [97m__type[37m field of metatables to implement custom types, through an override of the [97mtype[37m function in the kernel.

        [97mThreading[37m

        [97mScoping[37m

[97mNON-STANDARD LUA APIS PROVIDED BY OPENCOMPUTERS[37m
        OpenComputers provides a few extra APIs and one extra function, to aid in writing programs.  These are the [97mcomponent[37m([97m2[37m) and [97mcomputer[37m([97m2[37m) APIs, as well as the [94mcheckArg[37m([97m2[37m) function.

[97mCOPYRIGHT
        Lua[37m is copyright (c) 1994-2018 Lua.org, PUC-Rio
